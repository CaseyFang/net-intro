Capa de Transporte
==================
\index{Capa de Transporte}
\index{Capa!Transporte}
\index{TCP}

La capa inmediatamente por encima de la capa de Internet es la de Transporte.
Un elemento clave de la capa de Internet es que esta no intenta garantizar la entrega
de ningún paquete concreto. La capa de Internet es casi perfecta, pero a veces
los paquetes pueden perderse o ser enviados fuera de su ruta.

![La Capa de Transporte](../images/layers-transport)

Sin embargo, los usuarios de la red quieren poder enviar archivos enteros
o mensajes a través de Internet con fiabilidad. Una red no nos resulta demasiado útil
si lo único que puede hacer es enviar paquetes que son recibidos la mayor parte del
tiempo. Para que la red sea útil, todos los paquetes deben ser reensamblados en
el orden correcto para reconstruir el mensaje en el sistema receptor. La red
también debe gestionar los paquetes que llegan desordenados, o aquellos que ni siquiera
llegan. La capa de Transporte es donde se gestiona la exactitud y la reconstrucción de
los mensajes en el equipo de destino.

Como ocurría en la capa IP, la capa de Transporte añade una pequeña cantidad de datos
a cada paquete para ayudar a resolver los problemas de reensamblado y reenvío de
paquetes

Cabeceras de Paquetes
---------------------

Si revisaras un paquete que estuviera viajando a través de múltiples conexiones
entre los equipos de origen y destino, verías una cabecera de acceso, una cabecera
de IP, y una cabecera del Protocolo de Control de Transporte (TCP), junto con los
datos reales del paquete.

![Cabeceras y Datos](../images/headers)

Cuando el paquete es recibido en una conexión, se elimina su cabecera de acceso,
y cuando el paquete es enviado hacia la siguiente conexión de su viaje, se le añade
una cabecera de acceso nueva. Las cabeceras IP y TCP permanecen en el paquete durante
todo su viaje. Recuerda que un paquete puede pasar a través de varios tipos de capas
de acceso a medida que es dirigido a través de Internet.

La cabecera IP contiene las direcciones del Protocolo de Internet de origen y destino
(IP), así como el Tiempo De Vida (TTL) del paquete. La cabecera IP es creada por el
equipo de origen y no se modifica (salvo el TTL) a medida que el paquete se mueve
a través de los distintos routers de su viaje. 

Las cabeceras TCP indican a dónde pertenecen los datos de cada paquete. A medida
que el equipo de origen divide el mensaje o archivo en paquetes, mantiene un
seguimiento de la posición de cada paquete, relativo al comienzo del mensaje o
archivo y coloca ése índice (*offset*) en cada paquete que crea y envía.

Reensamblado y reenvío de paquetes
----------------------------------

Cuando el equipo de destino recibe los paquetes, se fija en el índice de posición
respecto al comienzo del mensaje (*offset*), de modo que puede colocar el paquete en su
lugar correcto del mensaje reconstruido. Simplemente asegurándose de colocar los
datos del paquete en la posición correcta respecto al comienzo del mensaje, la
capa de Transporte es capaz de gestionar con facilidad los paquetes que llegan
desordenados. Si recibe un paquete adelantado respecto a la posición del mensaje,
lo coloca en un buffer, controlando la circunstancia de
que ahora existe un hueco dentro del mensaje que está siendo reconstruido.
Cuando, posteriormente, llega el paquete anterior, éste encaja
perfectamente en el hueco dejado dentro de los datos reconstruidos.

\index{tamaño de ventana}
Para evitar sobrecargar la red, la capa de Transporte en el equipo de origen
sólo envía una cierta cantidad de datos antes de esperar una confirmación desde
la capa de Transporte del equipo de destino de que esos paquetes se han recibido.
La cantidad de datos que el equipo de origen enviará antes de hacer una pausa
y esperar una confirmación, recibe el nombre de "tamaño de ventana".

El equipo emisor controla el tiempo que tarda en empezar a recibir mensajes de
confirmación desde el equipo receptor. Si las confirmaciones llegan rápido,
el equipo emisor aumentará su tamaño de ventana, pero si las confirmaciones tardan
en llegar, entonces el equipo emisor transmitirá menos datos. Gracias al ajuste
del tamaño de ventana, los equipos pueden enviar gran cantidad de datos rápidamente
a través de conexiones rápidas que tengan poca carga. Y cuando envían datos a
través de conexiones lentas o enlaces saturados, lo harán de modo que no sobrecarguen
la red.

Cuando se pierde un paquete, este nunca llega al equipo de destino, de modo que
ese equipo no enviará nunca la confirmación de recepción de esos datos.
Dado que el equipo emisor no recibe la confirmación, se llega rápidamente a un
punto en el cual se han enviado suficientes datos sin confirmar para llenar la
ventana y el emisor deja de enviar paquetes nuevos.

En ese momento, ambos equipos están esperando. El emisor está esperando la confirmación
de recepción de un paquete perdido que nunca llegará y el equipo receptor está
esperando un paquete perdido que tampoco llegará nunca. Para asegurarse de que
los equipos no se quedan esperando para siempre, el equipo de destino controla
la cantidad de tiempo transcurrida desde la recepción del último paquete de datos.
En algún momento, el equipo receptor decide que ya ha pasado demasiado tiempo y
envía un paquete al equipo emisor, indicándole en qué punto del mensaje recibió
datos por última vez. Cuando el equipo emisor recibe ese mensaje, "retrocede"
y vuelve a enviar datos desde la última posición en la que el equipo receptor le
informa de que recibió datos con éxito.

![Esperando un paquete perdido](../sketchnote/Transport)

La confirmación de recepción de datos por parte del equipo receptor, no permitiendo
al equipo emisor continuar el envío (tamaño de ventana), combinado con las peticiones
del equipo receptor al emisor para que "vuelva atrás y empiece de nuevo" cuando se
sospecha que los datos se han perdido, constituyen un método relativamente simple
para enviar con fiabilidad mensajes extensos o archivos a través de la red.

La capa de Transporte, durante el envío de una cadena de datos,
monitoriza constantemente la velocidad de recepción de confirmaciones y ajusta
dinámicamente su tamaño de ventana. Esto asegura que los datos se envíen rápidamente
cuando la conexión entre dos equipos es rápida, y mucho más lentamente cuando la
conexión tiene enlaces lentos o una gran carga.

La Capa de Transporte En Funcionamiento
---------------------------------------

Uno de los elementos clave de la capa de Transporte es que el equipo emisor
debe mantener todos los datos que está enviando hasta que su recepción haya sido
confirmada. Una vez que el equipo receptor confirma la recepción de los datos, el
emisor puede descartar los datos enviados. Podemos verlo gráficamente cuando un
mensaje se divide en muchos paquetes. Aquí, los diez primeros paquetes del mensaje
han sido enviados y confirmados por el equipo de destino ('a'). El equipo emisor
ha enviado seis paquetes más ('S') y luego se ha detenido por haber alcanzado
su tamaño de ventana.

![Almacenando en Buffer en la Capa de Transporte](../images/transport-buffer)

Existen tres paquetes que han sido enviados pero aún no han sido recibidos ("S"). Dado
que hay muchos saltos en la red, resulta muy habitual que más de un paquete esté en
camino a través de la red al mismo tiempo.

La capa de Transporte en el equipo receptor ha recibido y confirmado diez paquetes
y se los ha entregado a la aplicación receptora ('a').^[Hablaremos acerca
de la capa de Aplicación en el próximo capítulo.] La capa de Transporte en el
equipo de destino ha recibido tres paquetes más ('R'), pero un paquete está
desordenado. La recepción de un paquete desordenado no es algo preocupante,
siempre que los paquetes perdidos lleguen en un periodo de tiempo razonablemente
breve. En cuanto se reciban todos los paquetes, la capa de Transporte
reconstruirá el mensaje, encajando los paquetes entre sí como piezas de un puzzle,
y se lo entregará a la aplicación receptora.

Aplicaciones Clientes y Servidores
----------------------------------

\index{cliente}
\index{servidor}
El propósito de la capa de Transporte es proporcionar conexiones fiables entre
aplicaciones en red, de modo que esas aplicaciones puedan enviar y recibir cadenas
de datos. Para una aplicación, resulta tan sencillo como pedir a la capa de Transporte
que realice una conexión a una aplicación que se esté ejecutando en un equipo
remoto. La aplicación que inicia la conexión desde el ordenador local recibe el
nombre de "cliente", y a la aplicación que responde a la petición de conexión se le llama
"servidor". A la combinación de las dos aplicaciones en red desde ambos extremos de
la conexión se le denomina aplicación "cliente/servidor", dado que las dos partes de
la aplicación deben trabajar juntas.

Se ha realizado un montón de trabajo de ingeniería sobre las tres capas inferiores de
nuestra arquitectura para conseguir que resulte fácil abrir una conexión hacia un
equipo remoto y luego enviar y recibir datos a través de esa conexión.

Aplicaciones Servidor y Puertos
-------------------------------

Cuando una aplicación cliente quiere realizar una conexión con un equipo remoto,
resulta importante que la conexión se establezca con la aplicación servidor
correcta en ese equipo remoto. Una computadora remota puede disponer de un número
indeterminado de aplicaciones servidor diferentes funcionando al mismo tiempo.
Algunos ejemplos de aplicaciones servidor pueden ser:

* Servidor Web
* Servidor de Vídeo
* Servidor de Correo

![Puertos TCP](../sketchnote/Ports)

Por ejemplo, un cliente web (un navegador) debe conectarse al servidor web que
esté funcionando en el equipo remoto. De modo que una aplicación cliente no sólo
necesita saber a qué equipo remoto conectarse, también necesita elegir una
aplicación concreta para interactuar con ella en ese equipo remoto.

Se utiliza un concepto llamado "puertos" para permitir a la aplicación cliente
elegir con qué aplicación servidor quiere interactuar. Los puertos son como
extensiones telefónicas. Todas las extensiones tienen el mismo número de teléfono
(Dirección IP), pero cada extensión (aplicación servidor) dispone de un número
de extensión diferente (número de puerto).

Cuando una aplicación servidor se inicia, se pone a la "escucha" de conexione entrantes
en el puerto especificado. Una vez que la aplicación servidor ha informado de que está
preparada para recibir conexiones entrantes, espera hasta que se produce la primera
conexión.

Para que las aplicaciones cliente sepan a qué puerto deben conectarse, existe
una lista de puertos por defecto habituales para varias aplicaciones servidor:

* Telnet (23) - Inicio de sesión (*Login*)
* SSH (22) - Inicio de sesión segura (*Secure Login*)
* HTTP (80) - World Wide Web
* HTTPS (443) - Web Segura (*Secure Web*)
* SMTP (25) - Correo Entrante (*Incoming Mail*)
* IMAP (143/220/993) - Recuperación de Correo (*Mail Retrieval*)
* POP (109/110) - Recuperación de Correo (*Mail Retrieval*)
* DNS (53) - Resolución de Nombres de Dominio (*Domain Name Resolution*)
* FTP (21) - Transferencia de archivos (*File Transfer*)

Estos son los puertos habituales para esas aplicaciones. Pero algunas veces los
servidores pueden hacer que las aplicaciones escuchen en puertos no-estándar.
Si realizas desarrollo web, puedes ejecutar un servidor web en puertos no
estándar, como 3000, 8000, o 8888. Si te encuentras una URL como:

	http://prueba.ejemplo.com:8080/acceder

el "8080" indica que tu navegador va a usar los protocolos web para interactuar
con el servidor, pero conectándose al puerto 8080 en vez de hacerlo al puerto por
defecto, que sería el 80.

Resumen
-------

En cierto sentido, el propósito de la capa de Transporte es subsanar la circunstancia
de que las capas de Conexión e Internet pueden perder datos. Cuando las dos
capas inferiores pierden o desvían los paquetes, la capa de Transporte entra en
funcionamiento para reconstruir y/o reenviar esos datos. La existencia
de la capa de Transporte hace posible que las dos capas inferiores puedan ignorar
los problemas de reenvío y límite de velocidad.

Parte del objetivo de una arquitectura en capas es dividir un problema demasiado
complejo en otros subproblemas más pequeños. Cada capa se centra en resolver parte
del problema general y asume que las otras capas resuelven a su vez los problemas
que se supone que deben resolver.

Glosario
--------

**almacenar en buffer**: Mantener temporalmente los datos que han sido enviados o
recibidos, hasta que el equipo está seguro de que esos datos ya no se necesitan.

**confirmación**: Cuando el equipo receptor envía una notificación de vuelta al
equipo de origen, indicando que los datos han sido recibidos.

**escucha**: Cuando una aplicación servidor está funcionando y preparada para
aceptar conexiones entrantes desde aplicaciones cliente.

**puerto**: Un modo de permitir que muchas aplicaciones servidor diferentes esperen
conexiones entrantes en un mismo equipo. Cada aplicación escucha en un puerto
diferente. Las aplicaciones cliente realizan las conexiones a números de puerto
conocidos, para asegurarse de que están comunicándose con la aplicación servidor
adecuada.



Preguntas
---------

Puedes realizar este cuestionario online en http://www.net-intro.com/quiz/

1. ¿Cuál es el principal problema que se supone que resuelve la capa de
Transporte (TCP)?
a) El movimiento de paquetes a través de múltiples saltos desde un equipo de origen
hasta uno de destino
b) El movimiento de paquetes a través de una única conexión física
c) Gestionar los paquetes perdidos y desordenados
d) Gestionar la encriptación de datos sensibles

2. ¿Qué contiene la cabecera TCP?
a) La dirección física
b) La dirección IP y el Tiempo de Vida (TTL)
c) El número de puerto y el índice de posición del paquete (*offset*)
d) Qué documento está siendo solicitado

3. ¿Por qué es importante el "tamaño de ventana" para el funcionamiento adecuado de
la red?
a) Porque los paquetes demasiado grandes atascan las conexiones de fibra óptica
b) Evita que un equipo rápido envíe demasiados datos a través de una conexión lenta
c) Limita el número de saltos que un paquete puede dar antes de ser desechado
d) Determina qué parte de una dirección IP se corresponde con la dirección de red

4. ¿Qué ocurre cuando un equipo emisor recibe una confirmación desde el equipo
receptor?
a) El equipo emisor vuelve a enviar los datos para asegurarse de que se han
transmitido correctamente
b) El equipo emisor envía más datos, hasta alcanzar el tamaño de ventana
c) El equipo emisor envía una "confirmación de recepción de la confirmación"
d) El equipo emisor envía la confirmación al Mapa de Internet (IMAP)

5. ¿Cuál de estos elementos detecta y toma medidas cuando se pierden paquetes?
a) Equipo emisor
b) Puerta de acceso de la red
c) Routers centrales de Internet
d) Equipo receptor

6. Cuál de estos elementos retiene paquetes de datos para que puedan ser enviados
de nuevo si un paquete se pierde?
a) Equipo emisor
b) Puerta de acceso de la red
c) Routers centrales de Internet
d) Equipo receptor

7. ¿Cuál de estos elementos es más parecido a un puerto TCP?
a) Una estación de tren
b) Un cable de red submarino
c) El número de un apartamento
d) Un jardín de esculturas

8. ¿Qué parte de una aplicación cliente/servidor debe iniciarse primero?
a) Cliente
b) Servidor

9. ¿Cuál es el número de puerto que utiliza el Sistema de Nombres de Dominios (DNS)?
a) 22
b) 80
c) 53
d) 143

10. ¿Cuál es el número de puerto que utiliza el protocolo de recuperación de
mensajes IMAP?
a) 22
b) 80
c) 53
d) 143
