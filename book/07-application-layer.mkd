La Capa de Aplicación
=====================

\index{Capa!de Aplicación}
\index{Aplicación, Capa de}
Hemos ido estudiando nuestro modelo de red de cuatro capas TCP/IP desde abajo hacia
arriba, y por fin nos encontramos en la cima. La capa de Aplicación es el lugar
donde opera el software de red, como navegadores web, programas de correo o
reproductores de vídeo. Nosotros como usuarios interactuamos con esas aplicaciones
y las aplicaciones interactúan con la red por nosotros.

![La Capa de Aplicación](../images/layers-application)

Aplicaciones cliente y servidor
-------------------------------

Es importante recordar que se necesitan dos partes para que una aplicación en red
funcione. La arquitectura de una aplicación en red recibe el nombre de
"cliente/servidor". La parte servidor de la aplicación se ejecuta en algún punto
de Internet y tiene la información que los usuarios quieren ver o con la que desean
interactuar. La parte cliente de la aplicación realiza las conexiones con la
aplicación servidor, descarga la información y se la muestra al usuario. Estas
aplicaciones utilizan la capa de Transporte de cada uno de sus equipos para
intercambiar datos.

![Aplicaciones cliente/servidor](../sketchnote/Client_Server)

Para navegar por una dirección web, como www.khanacademy.org, necesitas tener
una aplicación web funcionando en tu equipo. Cuando tecleas una dirección en tu
navegador web, este se conecta con el servidor web adecuado, descarga las páginas
para ti, y luego te las muestra.

El servidor web de tu equipo envía una petición de conexión a www.khanacademy.org.
Tu equipo usa el nombre de domino para localizar la dirección IP correspondiente
al servidor y realizar una conexión de transporte con esa IP, luego comienza a
solicitar datos desde el servidor a través de la conexión de red. Cuando se reciben
los datos, el navegador te los presenta en la pantalla. A veces los navegadores web
muestran un pequeño icono animado para informarte de que los datos están siendo
descargados a través de la red.

En el otro extremo de la conexión hay otra aplicación llamada "servidor web".
El programa que hace de servidor web está siempre activo y esperando conexiones
de entrada. De modo que cuando quieres ver una página web, estás conectándote a
una aplicación servidor que ya estaba activa y aguardando tus conexiones.

En cierto sentido, las capas de Acceso, Trasporte e Internet, junto con el Sistema
de Nombres de Dominio (DNS), son como una red telefónica para aplicaciones en red.
Ellas "marcan el número" de diferentes aplicaciones servidor en la red y mantienen
"conversaciones" con esas aplicaciones para intercambiar datos.

Protocolos de la Capa de Aplicación
-----------------------------------

\index{cliente}
\index{servidor}
Igual que las personas que hablan por teléfono, cada pareja de aplicaciones en red
necesita fijar un conjunto de reglas que gobiernen la conversación. En la mayoría
de las culturas, cuando el teléfono suena y alguien lo coge es habitual saludar.
Normalmente, la persona que realiza la llamada (la persona cliente) permanece
callada hasta que la persona que responde al teléfono (la persona servidor) dice
"Hola". Si alguna vez has llamado a alguien que no sigue esta sencilla regla,
puede llegar a resultar bastante desconcertante. Probablemente, terminarías por
llegar a la conclusión de que la conexión no funcionaba correctamente, colgarías y
repetirías la llamada.

\index{protocolo}
Llamamos "protocolo" a un conjunto de reglas que gobiernan cómo nos comunicamos.
La definición de la palabra protocolo es "una regla que describe cómo
debe ser realizada una actividad, especialmente en el campo de la diplomacia". La
idea es que en situaciones formales, debemos comportarnos según un conjunto
concreto de reglas. Usamos esa palabra para describir aplicaciones en red, porque
sin reglas precisas, las aplicaciones no tienen forma de establecer y gestionar
una conversación. A las máquinas les gusta la precisión.

![Protocolos de aplicación](../sketchnote/Protocols)

\index{RFC-7230 HTTP}
Existen muchas aplicaciones en red diferentes, y resulta de suma importancia que cada
aplicación de red disponga de un protocolo bien documentado, para que todos los
servidores y clientes puedan operar entre ellos. Algunos de esos protocolos
son enrevesados y complejos.

El protocolo que describe cómo se comunica un navegador web con un servidor web
aparece descrito en multitud de documentos, empezando por este mismo:

[https://tools.ietf.org/html/rfc7230](../https://tools.ietf.org/html/rfc7230)

\index{HyperText Transport Protocol}
\index{Protocolo de Transporte de Hipertexto}
\index{HTTP}
El nombre formal del protocolo entre clientes y servidores web es el "Protocolo de
Transporte de Hipertexto" (*HyperText Transport Protocol*), o HTTP para abreviar.
Cuando pones "http:" o "https:" al principio de una URL que escribes en un navegador,
estás indicando que quieres descargar un documento usando el protocolo HTTP.

Si revisas el documento anterior y vas a la sección 5.3.2 de la página 41,
encontrarás el texto exacto que se supone que un cliente envía a un servidor web:

    GET http://www.example.org/pub/WWW/TheProject.html HTTP/1.1

Una de las razones de que el HTTP tenga tanto éxito consiste en que es relativamente
simple comparado con la mayoría de los protocolos cliente/servidor. A pesar de que el
uso básico del HTTP es relativamente sencillo, existen montones de detalles que permiten
a los clientes y servidores web comunicarse de forma eficiente y transferir una
amplia variedad de información y datos. El protocolo HTTP está descrito en seis
documentos diferentes, a lo largo de un total de 305 páginas. Puede parecer que eso es
detallar demasiado, pero la clave en el diseño de protocolos está en prever
todos los usos posibles del protocolo y en describir cada escenario cuidadosamente.

Exploración del protocolo HTTP
------------------------------

En esta sección vamos a probar el protocolo HTTP de forma manual, simulando ser un
navegador web y enviando comandos HTTP a un servidor web para descargar datos.
Para jugar con el protocolo HTTP, usaremos una de las primeras aplicaciones que
se crearon para Internet.

\index{RFC-15 Telnet}
\index{telnet}
La aplicación "*telnet*" fue desarrollada por primera vez en 1968, y ese desarrollo
se realizó de acuerdo a uno de los primeros estándares de Internet:

[https://tools.ietf.org/html/rfc15](../https://tools.ietf.org/html/rfc15)

\index{ARPANET}
\index{NSFNet}
Este estándar sólo tiene una extensión de cinco páginas y a estas alturas, seguramente
seas capaz de interpretar y comprender fácilmente la mayoría de lo que hay en el
documento. La aplicación cliente de *telnet* es tan antigua como un dinosaurio,
ya que viene de tiempos "prehistóricos", si hablamos en términos de la edad de
Internet. Internet fue creado en 1985 por el proyecto NSFNet y el precursor del
NSFNet, llamado ARPANET, fue iniciado en 1969. *Telnet* se diseñó y creó antes
incluso de que estuviera en funcionamiento la primera red TCP/IP.

Curiosamente, la aplicación *telnet* sigue presente en la mayoría de los sistemas
operativos modernos. Puedes acceder a *telnet* desde el terminal (línea de comandos)
en Macintosh y Linux. La aplicación *telnet* estaba también presente desde Windows 95
hasta Windows XP, pero ya no está incluida en las últimas versiones de ese sistema
operativo. Si dispones de una versión más moderna de Windows, puedes descargar e
instalar un cliente *telnet* para realizar los ejemplos de esta sección.

*Telnet* es una aplicación muy sencilla. Ejecuta *telnet* desde la línea de comandos
(o terminal), y teclea el siguiente comando:

    telnet www.dr-chuck.com 80

\index{puertos TCP}
\index{puerto 80}
El primer parámetro es un nombre de dominio (se puede usar también una dirección IP),
seguido de un  puerto al que conectarse en ese equipo. Usamos el puerto para indicar
a qué servidor de aplicación queremos conectarnos. El puerto 80 es donde normalmente
esperaríamos encontrar una aplicación servidor HTTP (web) en un equipo. Si no hay
un servidor web escuchando en el puerto 80, se agotará el tiempo de conexión y se
producirá un error. Pero si existe un servidor web, conectaremos con él y cualquier
cosa que escribamos en nuestro teclado será enviada directamente al servidor. En ese
punto, necesitaremos conocer el protocolo HTTP y escribir los comandos exactamente como
se esperan. Si no conocemos el protocolo, el servidor web no se mostrará muy amistoso.
Aquí vemos un ejemplo de lo que ocurre cuando las cosas no van bien:

    telnet www.dr-chuck.com 80
    Trying 198.251.66.43...
    Connected to www.dr-chuck.com.
    Escape character is '^]'.
    HELP
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <html><head>
    <title>501 Method Not Implemented</title>
    ...
    </body></html>
    Connection closed by foreign host.


Escribimos "telnet" en el terminal solicitando una conexión al puerto 80 (el servidor
web) del equipo www.dr-chuck.com. Puedes ver cómo nuestra capa de transporte comienza
investigando el nombre de dominio, y encuentra que la dirección real es "198.251.66.43",
realizando a continuación una conexión con éxito a ese servidor. Una vez que estamos
conectados, el servidor espera que escribamos un comando seguido por la tecla intro
(*enter*) o retorno (*return*). Como no conocemos el protocolo, tecleamos "HELP" (ayuda)
e intro. Al servidor no le gusta, nos envía un mensaje de error y luego cierra la
conexión. No disponemos de un segunda oportunidad. Si no conocemos el protocolo, el
servidor web no quiere hablar con nosotros.

\index{Hackeando HTTP}
Pero volvamos atrás y leamos la sección 5.3.2 del documento RFC-7230 antes de probar
de nuevo a solicitar un documento usando la sintaxis correcta:

    telnet www.dr-chuck.com 80
    Trying 198.251.66.43...
    Connected to www.dr-chuck.com.
    Escape character is '^]'.
    GET http://www.dr-chuck.com/page1.htm HTTP/1.0

    HTTP/1.1 200 OK
    Last-Modified: Sun, 19 Jan 2014 14:25:43 GMT
    Content-Length: 131
    Content-Type: text/html

    <h1>The First Page</h1>
    <p>
    If you like, you can switch to the
    <a href="http://www.dr-chuck.com/page2.htm">
    Second Page</a>.
    </p>
    Connection closed by foreign host.

Realizamos la conexión con el navegador web de nuevo usando *telnet*, luego enviamos
un comando GET que indica qué documento queremos descargar. Usamos la versión 1.0
del protocolo HTTP, porque es más sencilla que la HTTP 1.1. Luego enviamos una línea
en blanco pulsando "retorno" o "intro" para indicar que hemos terminado con nuestra
petición.

![Descarga de HTTP de forma manual](../sketchnote/Hacking_HTTP)

\index{HTML}
\index{HyperText Markup Language}
\index{Lenguaje de Marcas de HiperTexto}
Como le hemos enviado la petición correcta, el equipo remoto responde con una series
de cabeceras describiendo el documento, seguido por una línea en blanco, y a
continuación envía el propio documento.

\index{código de estado HTTP!200}
\index{código de estado HTTP!301}
\index{código de estado HTTP!404}
Las cabeceras comunican metadatos (datos acerca de los datos) del documento que
hemos solicitado. Por ejemplo, la primera línea contiene un código de estado (*status
code*).

En este ejemplo, el código de estado "200" significa que las cosas han ido bien.
Un código de estado "404" en la primera línea de las cabeceras indica que el
documento solicitado no se ha encontrado. Un código de estado "301" indica que
el documento ha cambiado de sitio y está en una ubicación diferente.

Los códigos de estado de HTTP están divididos en rangos:
Los códigos 2XX indican éxito, los códigos 3XX son para redirigir, 
los códigos 4XX indican que la aplicación cliente hizo algo incorrecto,
y los códigos 5xxx indican que el servidor hizo algo incorrecto.

Como se ha solicitado un documento de Lenguaje de Marcas de HiperTexto (HTML), este
contiene marcas como \<h1\> y \<p\>. Cuando es un navegador quien recibe un documento
en formato HTML, tiene en cuenta las marcas del documento, las interpreta y nos muestra
una versión del documento con formato.

El protocolo IMAP para descarga de correo
-----------------------------------------

El protocolo HTTP sólo es uno más de los muchos protocolos de aplicación
cliente/servidor utilizados en Internet. Otro protocolo habitual se usa para que una
aplicación de correo que se esté ejecutando en tu equipo pueda descargar correo desde
un servidor central. Como es muy probable que tu computadora personal no permanezca
encendida todo el tiempo, cuando alguien te envía un correo en realidad este es
dirigido a un servidor y almacenado allí hasta que tú enciendes tu equipo y descargas
todo el correo nuevo.

\index{RFC-3501 IMAP}
\index{protocolo de correo}
\index{IMAP}
Como muchas aplicaciones estándar, el Protocolo de Acceso a Mensajes de Internet
(*Internet Message Access Protocol* o IMAP) está descrito en una serie de documentos
de Peticiones de Comentarios (*Request For Comment* o RFC), comenzando por este:

    https://tools.ietf.org/html/rfc3501

El IMAP es un protocolo más complicado que el protocolo web, de modo que no seríamos
capaces de usar comandos *telnet* para simular ese protocolo. Pero si fueras a
desarrollar una aplicación de lectura de correo, podrías estudiar cuidadosamente
el documento y crear código para mantener una comunicación satisfactoria con un servidor
que cumpla con los estándares IMAP. He aquí un ejemplo sencillo de la sección 6.3.1
del documento anterior, donde se muestra lo que el cliente (C:) envía y cómo responde
el servidor (S:):

    C: A142 SELECT INBOX
    S: * 172 EXISTS
    S: * 1 RECENT
    S: * OK [UNSEEN 12] Message 12 is first unseen
    S: * OK [UIDVALIDITY 3857529045] UIDs valid
    S: * OK [UIDNEXT 4392] Predicted next UID
    S: * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)
    S: * OK [PERMANENTFLAGS (\Deleted \Seen \*)] Limited
    S: A142 OK [READ-WRITE] SELECT completed

Los mensajes que se envían entre sí el cliente y el servidor no están diseñados para ser
visualizados por un usuario final, de modo que no son particularmente descriptivos.
Estos mensajes tienen un formato concreto y son enviados en un orden determinado para
que puedan ser generados y leídos por aplicaciones informáticas en red, una en cada
extremo de la conexión.

Control de flujo
----------------

\index{control de flujo}
\index{tamaño de ventana}
Cuando estudiamos la capa de Transporte, hablamos acerca del "tamaño de ventana", que
era la cantidad de datos que enviaba la capa de Transporte en el equipo emisor
antes de detenerse y esperar una confirmación.

![Almacenamiento en la Capa de Transporte](../images/transport-buffer)

En esta figura, vemos un mensaje dividido en paquetes, con algunos de esos paquetes
ya enviados y confirmados. Seis paquetes han sido enviados pero aún no han sido
confirmados, y la capa de Transporte del emisor ha alcanzado el límite de su ventana
de transmisión, de modo que está detenido hasta que reciba una confirmación desde la
capa de Transporte del equipo receptor. El equipo receptor ha recibido tres paquetes,
uno de los cuales está desordenado.

Cuando examinamos antes este ejemplo desde el punto de vista de la capa de Transporte,
ignorábamos de dónde venían los paquetes enviados y a dónde se dirigían esos
paquetes dentro del equipo receptor. Ahora que estamos considerando la capa de
Aplicación, podemos incluir las dos aplicaciones que son el origen y el destino de
la cadena de datos.

Supongamos que el navegador web ha realizado una conexión de transporte con el
servidor web y ha comenzado a descargar el fichero de una imagen. El servidor web habrá
abierto el archivo de la imagen y estará enviando los datos desde el fichero hacia su
capa de Transporte tan rápido como le sea posible. Pero la capa de Transporte debe
seguir las reglas del tamaño de ventana, de modo que sólo podrá enviar una cierta
cantidad de datos cada vez. Cuando la ventana se llene, el servidor web se
detendrá hasta que la capa de Transporte en el equipo de destino empiece
a recibir paquetes y a enviar confirmaciones de ello.

A medida que la capa de Transporte del equipo de destino comienza a recibir paquetes,
reconstruye la cadena de datos, envía confirmaciones de recepción y entrega la
cadena de paquetes reconstruida al navegador web que esté activo
en la pantalla del usuario. A veces, en una conexión lenta, se puede ver al navegador
"dibujar" las imágenes a medida que se descargan los datos. En conexiones rápidas los
datos llegan tan deprisa que las imágenes aparecen de forma instantánea.

Si volvemos a dibujar el esquema de los paquetes en la capa de Transporte,
añadiendo ahora ambas capas de Aplicación, y teniendo en cuenta que los paquetes que
están en medio corresponderían a la imagen que se está enviando, quedaría algo como
esto:

![Almacenamiento en las capas de Aplicación y Transporte](../images/application-transport-buffer)

El servidor web está leyendo el fichero de imagen ('F') y enviándolo como una cadena
hacia el navegador web, tan rápido como puede. La capa de
Transporte de origen ha dividido la cadena en paquetes y ha usado la IP del equipo de
destino para enviar los paquetes hacia él.

La capa de Transporte ha enviado seis paquetes ('S') y luego ha dejado de enviar,
por haber alcanzado su tamaño de ventana y ha pausado el servidor web.
Tres de esos seis paquetes han llegado a la capa de Transporte del equipo de destino
('R'), y los otros tres están aún realizando el viaje a través de Internet ('S').

A medida que la capa de Transporte de destino va uniendo de nuevo los trozos de la
cadena, envía una confirmación (ACK) y entrega los datos a la aplicación receptora (el
navegador web). El navegador web reconstruye la imagen ('A') y la muestra al usuario
una vez recibidos los datos.

Un detalle clave en el que fijarse en este dibujo es que las capas de transporte
no conservan los paquetes del fichero completo. Sólo retienen los paquetes que están
"en tránsito" y sin confirmar. Una vez que los paquetes son confirmados y entregados
a la aplicación de destino, no hay ninguna razón para que ninguna de las capas de
Transporte (ni la de origen ni la de destino) conserven esos paquetes.

Cuando la confirmación llega desde el equipo de destino hasta el de origen,
la capa de Transporte del equipo de origen activa de nuevo la aplicación servidor
web y el servidor continúa leyendo datos desde el archivo y enviándolos hacia
la capa de Transporte de origen para que esta los transmita a través de la red.

Esta capacidad de iniciar y detener la aplicación que emite los datos para asegurarse
de enviarlos lo más rápido posible sin llegar a colapsar Internet recibe
el nombre de "control de flujo". Las aplicaciones no son
responsables del control de flujo, ellas sólo tratan de enviar o recibir datos
tan rápido como pueden, y las dos capas de transporte inician y
detienen las aplicaciones a medida que lo necesitan, basándose en la velocidad
y fiabilidad de la red.

Creación de aplicaciones en red
-------------------------------

\index{socket}
Las aplicaciones que envían y reciben datos a través de la red están escritas
en uno o más lenguajes de programación. Muchos lenguajes de programación tienen
librerías de código^[Aunque la traducción correcta de *libraries of code* sería *bibliotecas de
código*, resulta bastante habitual entre la comunidad de programadores llamarles
*librerías de código*, por lo que es el término que se utilizará en este libro.
(Nota del trad.)]
que hacen que resulte bastante sencillo escribir
código de aplicación para enviar y recibir datos a través de la red.
Con una buena librería de programación, realizar una conexión con una aplicación
que esté corriendo en un servidor y enviar y recibir datos de ese servidor
resulta generalmente tan sencillo como leer y escribir en un fichero.

\index{sockets en programación}
Como ejemplo, el siguiente código es todo lo que se necesita en el lenguaje de
programación Python para realizar una conexión con un servidor web y
descargar un documento:

![Programación con sockets en Python](../images/python-socket)

Aunque tal vez no conozcas el lenguaje de programación Python, el detalle clave
es que sólo se necesitan diez líneas de código para establecer y usar una conexión
de red. Este código es sencillo porque las capas de Transporte, Internet y Acceso
resuelven los problemas en cada una de sus capas tan eficazmente que las aplicaciones
que usan la red pueden ignorar casi todos los detalles técnicos de implementación de
esa red.

En la aplicación Python, en esta línea de código

    mysock.connect(('www.py4inf.com', 80))

hemos especificado que estamos conectándonos a la aplicación que está escuchando
las conexiones entrantes en el puerto 80 del equipo remoto www.py4inf.com.

Al elegir
el puerto 80 estamos indicando que queremos conectarnos a un servidor World Wide Web
en ese equipo y que deseamos comunicarnos con ese servidor usando el Protocolo de
Transporte de HiperTexto (HTTP).

Resumen
-------

El objetivo del conjunto de las tres capas inferiores (Transporte, Internet y
Conexión) es conseguir que la aplicación que se ejecuta en la capa de Aplicación
pueda centrarse en los problemas concretos que esa aplicación tiene que resolver,
y deje que virtualmente toda la complejidad del movimiento de datos a través de la red
sea gestionado por las capas inferiores del modelo de red.

Gracias a que este método proporciona una gran facilidad para crear aplicaciones en red,
disponemos de una amplia variedad de programas de este tipo, como navegadores web,
aplicaciones de correo, vídeo-juegos en red, aplicaciones de telefonía basadas
en red, y muchas otras. Y lo que resulta aún más excitante es que resulta sencillo
experimentar y crear cualquier tipo nuevo de aplicación en red para resolver
problemas que quizás no han sido ni siquiera imaginados aún.

Glosario
--------

**código de estado**: Un detalle del protocolo HTTP que indica el éxito o fracaso
general de la solicitud de un documento. El código de estado HTTP más conocido
es el "404", que es la forma que tiene un servidor HTTP de decirle al cliente
(por ejemplo, un navegador) que el documento solicitado no se ha podido encontrar.

**control de flujo**: Cuando un equipo emisor reduce la velocidad para asegurarse
de que no satura ni la red ni al equipo de destino. El control de flujo también
consigue que el equipo emisor aumente la velocidad a la que envía los datos
cuando está seguro de que la red y el equipo de destino pueden gestionar
velocidades de trasmisión de datos más rápidas.

**HTML**: *HyperText Markup Language* (Lenguaje de Marcas de HiperTexto). Un formato
textual que resalta texto usando etiquetas rodeadas de los símbolos menor-que y
mayor-que. 
Un ejemplo de HTML podría tener este aspecto: \<p\>Esto es \<strong\>bonito\</strong\>\</p\>.

**HTTP**: *HyperText Transport Protocol* (Protocolo de Transporte de HiperTexto).
Un protocolo de la capa de Aplicación que permite a los navegadores web descargar
documentos desde los servidores web.

**IMAP**: *Internet Message Access Protocol* (Protocolo de Acceso a Mensajes
de Internet). Un protocolo que permite a los clientes de correo iniciar sesión
y descargar mensajes desde los servidores de correo que permitan IMAP.

**navegador web**: Una aplicación cliente que se ejecuta en tu equipo para
descargar y mostrar páginas web.

**servidor web**: Una aplicación que envía (sirve) páginas web.

**socket**: Una librería de software disponible en muchos lenguajes de programación
que consigue que crear una conexión de red e intercambiar datos a través de ella
resulte casi tan sencillo como abrir y leer un fichero en el mismo equipo.

**telnet**: Una sencilla aplicación cliente que realiza conexiones TCP con diversas
combinaciones de dirección/puerto, y que permite teclear datos para ser enviados
a través de la conexión. En los primeros días de Internet, *telnet* se usaba
para iniciar sesión remotamente en un equipo a través de la red.



Cuestionario
------------

1. ¿Qué capa está justo debajo de la capa de Aplicación?
a) Transporte
b) Internet
c) Capa de Acceso
d) Capa Obtusa

2. ¿Qué tipo de documento se usa para describir en detalle los protocolos
usados por la capa de Aplicación?
a) DHCP
b) RFC
c) APPDOC
d) ISO 9000

3. ¿Cuál de los siguientes es un concepto ideado en la capa de Aplicación?
a) 0f:2a:b3:1f:b3:1a
b) 192.168.3.14
c) www.khanacademy.com
d) http://www.dr-chuck.com/

4. ¿Cuál de los siguientes es un tema del que *no* debe preocuparse la capa
de Aplicación?
a) Cuál de los equipos (cliente o servidor) inicia la comunicación
b) El formato de los comandos y respuestas intercambiados a través de un *socket*
c) Cómo va cambiando el tamaño de ventana a medida que los datos van siendo enviados
a través de un socket
d) El modo en el que se representan los datos al ser enviados a través de la red para
garantizar la interoperabilidad.

5. ¿Cuál de los siguientes es un protocolo de la capa de Aplicación?
a) HTTP
b) TCP
c) DHCP
d) Ethernet

6. ¿Qué puerto se utiliza habitualmente para comunicarse con un servidor web?
a) 23
b) 80
c) 103
d) 143

7. ¿Cuál es el comando que envía un navegador a un servidor web para descargar
un documento web?
a) RETR
b) DOCUMENT
c) 404
d) GET

8. ¿Cuál es la utilidad de la cabecera "Content-type" cuando se descarga un
documento a través del protocolo web?
a) Indicarle al navegador cómo mostrar el documento descargado
b) Indicarle al navegador dónde debe ir si no se puede encontrar el documento
c) Indicarle al navegador si el documento descargado está vacío o no
c) Indicarle al navegador dónde terminan las cabeceras y empieza el contenido

9. ¿Qué comando habitual en UNIX se puede utilizar para enviar comandos sencillos
a un servidor web?
a) ftp
b) ping
c) traceroute
d) telnet

10. ¿Qué significa un código de estado HTTP "404"?
a) El documento ha cambiado de ubicación
b) Descarga del documento correcta
c) Error de protocolo
d) Documento no encontrado

11. ¿Qué símbolos se utilizan para resaltar la sintaxis en los documentos HTML?
a) Los símbolos menor-que y mayor-que < > 
b) Símbolos de exclamación ! 
c) Paréntesis cuadrados (corchetes) [ ]
d) Llaves { }

12. ¿Cuál de los siguientes es un protocolo usado habitualmente para descargar correo?
a) RFC
b) HTML
c) ICANN
d) IMAP

13. ¿Qué protocolo de aplicación describe el RFC15?
a) telnet
b) ping
c) traceroute
d) www

14. ¿Qué le ocurre a una aplicación servidor que está enviando un fichero grande
cuando la capa TCP ha enviado datos suficientes para llenar el tamaño de ventana
y no ha recibido aún una confirmación de recepción?
a) La aplicación cambia su transmisión a un socket nuevo
b) La aplicación falla y debe ser reiniciada
c) La aplicación se pone en pausa hasta que el equipo remoto confirma que ha recibido
parte de los datos
d) El router más cercano que ejerza de puerta de acceso empieza a descartar los paquetes
que excederían el tamaño de ventana

15. ¿Qué es un "socket" en Internet?
a) Un modo de que los dispositivos obtengan energía de forma inalámbrica
b) Un modo de que los dispositivos obtengan una dirección IP
c) Una entrada en una tabla de enrutamiento
d) Una conexión bi-direccional entre un par de aplicaciones cliente y servidor

16. ¿Qué debe figurar en el código de una aplicación para poder realizar una conexión
a través de un socket?
a) La dirección del servidor y el número de puerto en ese servidor
b) La ruta entre los equipos de origen y destino
c) Qué parte de la dirección IP se corresponde con la dirección de red
d) El tamaño inicial de la ventana TCP durante la transmisión
